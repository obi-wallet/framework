/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_signer_free(a: number): void;
export function signer_new(a: number, b: number, c: number, d: number): void;
export function signer_handleIncoming(a: number, b: number, c: number): void;
export function signer_proceed(a: number, b: number): void;
export function signer_completedOfflineStage(a: number, b: number): void;
export function signer_partial(a: number, b: number, c: number): void;
export function signer_add(a: number, b: number, c: number): void;
export function signer_create(a: number, b: number, c: number): void;
export function keyRefreshSimulated(a: number, b: number, c: number): void;
export function __wbg_keygenerator_free(a: number): void;
export function keygenerator_new(a: number, b: number, c: number): void;
export function keygenerator_handleIncoming(a: number, b: number, c: number): void;
export function keygenerator_proceed(a: number, b: number): void;
export function keygenerator_create(a: number, b: number): void;
export function start(): void;
export function keygen(a: number, b: number, c: number): void;
export function sign(a: number, b: number, c: number, d: number, e: number): void;
export function generateKeypair(a: number, b: number, c: number): void;
export function createMeeting(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function joinMeeting(a: number, b: number, c: number, d: number, e: number): void;
export function keygenSimulated(a: number, b: number): void;
export function __wbg_simulationsigner_free(a: number): void;
export function simulationsigner_new(a: number, b: number): void;
export function simulationsigner_completedOfflineStage(a: number, b: number): void;
export function simulationsigner_partial(a: number, b: number, c: number): void;
export function simulationsigner_add(a: number, b: number, c: number): void;
export function simulationsigner_create(a: number, b: number, c: number): void;
export function signingOfflineStageSimulated(a: number, b: number): void;
export function createSigners(a: number, b: number): void;
export function __wbg_keyrefresh_free(a: number): void;
export function keyrefresh_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function keyrefresh_handleIncoming(a: number, b: number, c: number): void;
export function keyrefresh_proceed(a: number, b: number): void;
export function keyrefresh_create(a: number, b: number): void;
export function rustsecp256k1_v0_4_1_context_create(a: number): number;
export function rustsecp256k1_v0_4_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_4_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_4_1_default_error_callback_fn(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke0_mut__hf5e2908412a37ea5(a: number, b: number): void;
export function wasm_bindgen__convert__closures__invoke1_mut__h11287ea14f1bef07(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke1_mut__hc072ccd0c523f415(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h81dcc53682c1bd6e(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
